// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VENDOR
  USER
  PREMIUM
  ADMIN
  MODERATOR
  BANNED
}

model User {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  email      String       @unique
  name       String
  phone      String?
  roles      Role[]
  password   String
  orders     Order[]
  addresses  Location[]
  favourites Restaurant[]
  helpCenter HelpCenter[]
}

model Location {
  id                   Int         @id @default(autoincrement())
  name                 String
  details              String
  label                String?
  lat                  Float
  long                 Float
  extDetails           String?
  deliveryInstructions String?
  user                 User?       @relation(fields: [userId], references: [id])
  userId               String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  Restaurant           Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId         String?     @unique
}

model Voucher {
  id        Int      @id @default(autoincrement())
  name      String
  value     Int
  isActive  Boolean  @default(true)
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model Restaurant {
  id           String      @id @default(cuid())
  title        String
  isActive     Boolean     @default(true)
  details      String?
  item         Item[]
  openingFrom  Int         @default(10)
  openingTo    Int         @default(22)
  deliveryTime Int         @default(24)
  type         String      @default("Main dishes")
  location     Location?
  photo        Attachment?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User[]

  orders Order[]
}

model Item {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  category     String
  photo        Attachment?
  isActive     Boolean       @default(true)
  details      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String
  variation    Variation[]
  orderedItem  OrderedItem[]
}

model Variation {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  Item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id           String      @id @default(cuid())
  name         String
  type         String
  path         String[]
  host         String      @default("/static/")
  Item         Item?       @relation(fields: [itemId], references: [id])
  itemId       Int?        @unique
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Order {
  id           String        @id @default(cuid())
  status       OrderStatus   @default(Pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  User         User          @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String
  items        OrderedItem[]
  subTotalFee  Int
  totalFee     Int
  voucher      Voucher?      @relation(fields: [voucherId], references: [id])
  voucherId    Int?
}

model OrderedItem {
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  quantity  Int
  price     Int
  variation String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String

  @@id([orderId, itemId, price])
}

enum OrderStatus {
  Pending
  Accepted
  Preparing
  Delaying
  Picked
  Completed
  Rejected
  Cancelled
}

model HelpCenter {
  id        Int               @id @default(autoincrement())
  title     String
  icon      String?
  isActive  Boolean           @default(true)
  user      User?             @relation(fields: [userId], references: [id])
  userId    String?
  query     HelpCenterQuery[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model HelpCenterQuery {
  id           Int        @id @default(autoincrement())
  title        String
  icon         String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  HelpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
  helpCenterId Int
}
